node is designed to handle IO.
We have seen that some kind of programs are not good fit for this model.
Performing Cpu intensive tasks using node will block the event loop.
instead cpu intensive tasks should be assigned to different process.

Node allows you to spawn process that become children to the process that launched them.


Another situation where you need child process is when you want to execute an external commmand from node.


this shows you how to create commuicate with and terminate external processes.

executing external commands.


var child_process = require('child_process')
exec(command, callback);
the first argument is the string with the command as you want to lauch it from the shell.


exec('ls', function (err, stdout, stderr) {
	// ...
});


//import the external command defined by child_process module.


var exec = require('child_process').exec;

//launch the command ls.

exec('cat exec.js | wc -l', function (err, stdout, stderr) {
	//if the command exited or the command failed.
	if (err) {
		console.log('child process exited with code', err.code);
		return;
	}
	console.log(stdout);
});


note that you can also passing an optional argument containing some cofiguration options before the callback function.

var exec = require(child_process).exec;
var options = {
	timeout: 10000,
	killSignal: 'SIGKILL'
}

cwd - the availabel options are currrent working directory.
encoding - this is the default encoding of the child output.
node supports the following string encoding.
 - ascii
 - utf-8
 - usc2
 - base64

timeout - this is the milliseconds for the execution of the command.
the default is 0 which waits indefinitely for the command to end.


killsignal - this is the signal to be sent to the child process if it times out or exceeds the output buffer.
- sigterm: this sends a termination signal to the process.
sigkill: this is handled by the operating system and causes the child process to close without cleanup routine being triggered.

env -  the enviroment variable to be passed to the child process. default is null. this means that the child process inherits all the parents enviroment variable.


Using spawn to create a new child process.
you can spawn a new child process based on the child_process.spawn

var spawn = require('child_process').spawn;


launch the child process with tail -f /var/log/system.log command.

var child = require('tail', ['-f', '/var/log/system.log']);

the spawn function call returns the child process object.

Listening for data from the childprocess.
A Child prcess has a property named stdout which represents the childoutput as stream.

you can then bind the data event on the stream.

//prints the child output to the console.

child.stdout.on('data', function () {
	console.log('tail output: ' + data);
});

Everytime the childprocess outputs any data the parent gets notified and prints it out to the console.


::Sending data to the child process.


Signals and killing process.
Singals are a simple way for the parent process to communicate with the child process or even kill the child process.


child_process.exec work with external commands.allows you to work with environment variables.

you also learned how to spawn child processes that execute commands by child_process.spawn method.

doing this allows you to interact with the child process using input and output stream.









































































































































