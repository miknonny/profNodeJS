Using Event Emitter Pattern to Simplify event Binding.

In node Objects emit events.
A tcp server can emit a "connect" event for each time that a client connects.

A file stream can emit a data event for each time that a chunk of data is read.

This allows programmer to subscribe to events that they are interested in.

- in node you can also write your own event emitters.

node provides an event pseudoclass that can be used as a base for creating your own emitters.

Understanding the standard callback pattern.

Asynchronous programming do not use function return values to indicate that a function is finished instead they use a continous passing style.


An example of the continous passing style in node.

var fs = require('fs');

fs.readFile('/etc/paswd', function (error, fileContent) {
	if (error) {
		throw error;
	}
	console.log('file content', fileContent.toString());
});

Here we pass an anonymous inline function as the second argument.

Understanding event emitter pattern.

the standaard callback function that executes eachtime you want to be notified that something has completed is ok.

What if several events take place during execution. the standard callback pattern is not very useful. this is where the event emitter pattern is helpful.

When you use the event emitter pattern. two or more objects are involved.
the event emitter and one or more listeners.

An event emitter is an object that emits events.
Event listener binds the event emitter and listens for certain types of events.


var req = http.request(options, function (response) {
	response.on("data", function (data) {
		console.log("some data from the response", data);
	});
	response.on("end", function () {
		console.log("response ended");
	});
});

req.end();


Understanding event types.
Event emitter contain a set of methods.
.addListener .on to add an event listener.
.once - this event will be called mostly once.
.removeEventListener - removes all event listeners to a given event type.


binding callbacks.


function receiveData (data) {
	console.log("got data from a read stream")
};

readStream.addListener("data", receiveData);

Binding multiple event emitters.

readStream.on("data", function (data) {
	console.log("i have some data")
});

readStream.on("data", function(data){
	console.log("I have somedata here too")
});
N/B
the event listener may not be called immediately after an event is emitted. cos there might be other events called before it.

if the first listerner throws an  error for a particular event. the second event listener  may not be called. cos the first event listeer will catch the error and handle it.

Removing an event listener.

readStream.on("data", function (data) {
	console.log("got data from file read stream");
});
//removing the event.

readStream.removeListener("data", receiveData);

removing an event listener causes you to name your callback function.

listening to events atmost once.

function receiveData (data) {
	console.log("got data from the readStream");
}


readStream.once("data", receiveData);

You can remove all events like this.
emitter.removeAllListeners(type);















































































