Http is an application level protocol for content and application delivery.

//importing the http module to our script
var http = require ('http');

//creating the http server
var server = http.createServer();

//listeining for incoming request
server.on ('request', function (req, res) {
	//setting the mime type and 200ok response
	res.writeHead(200, {Content-Type: 'text/plain'});
	response.write('Hello World');
	res.end();
});


server.listen(4000);

When a client  makes a request. the http server emits a request event passing in HTTP request and http response object.

Understanding the http request Object.
req.url -> contains the request url as a string. it does not contain the host name or port.
req.method -> this contains the http method used on the request.
req.headers -> This contains an object with a property for every http header on the request.

var util = require('util');

require('http').createServer(function (req, res) {
	res.writeHead(200, {'Content-type': 'text/plain'});
	res.end(util.inspect(req.headers));
}).listen(4000);



here we are using util.inspect.()
a utility function that analyses the property of any Object.




A typical response header.
{ host: 'localhost:4000',
  connection: 'keep-alive',
  'cache-control': 'max-age=0',
  accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
  'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36',
  'accept-encoding': 'gzip,deflate,sdch',
  'accept-language': 'en-US,en;q=0.8' }



Changing or setting header.
res.setHeader(name, value)

removing header.
res.removeHeader('Cache-Control');

Witing a piece of response body.
res.write('hello');

Writing a piece of Buffer.
var buffer = new Buffer('hello world');

res.write(buffer);


Streaming Http Chunked Responses.

One of the great features of node is the ability to consume and produce streams easily from different sources.

Http chunked encoding allows the server  to keep sending data to the client with outever sending the body size. unless you specify the body length. for the client to terminate the response a final chunk of length 0 has to be sent.


Transfer-Encoding: chunked

Piping.
note that you can pipe any read stream into the response.

var fs = require('fs');

require('http').createServer(function (req, res) {
	res.writeHead(200, {'Content-Type': 'video/mp4'});
	var rs = fs.createReadStream('test.mp4');
	rs.pipe(res);
}).listen(4000);






































